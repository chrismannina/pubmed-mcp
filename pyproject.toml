[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pubmed-mcp-server"
version = "1.0.0"
description = "A comprehensive PubMed Model Context Protocol (MCP) server"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Agent Care Team"},
]
keywords = ["pubmed", "mcp", "medical", "literature", "search", "api"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Science/Research", 
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Operating System :: OS Independent",
]
dependencies = [
    "fastapi>=0.115.6",
    "uvicorn[standard]>=0.32.1",
    "httpx>=0.28.1",
    "pydantic>=2.10.3",
    "python-dotenv>=1.0.1",
    "cachetools>=5.5.0",
    "mcp>=1.9.0",
    "python-multipart>=0.0.18",
    "aiofiles>=24.1.0",
    "lxml>=5.1.0",
    "beautifulsoup4>=4.12.3",
    "python-dateutil>=2.8.2",
    "bibtexparser>=1.4.0",
    "jinja2>=3.1.4",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.23.2",
    "pytest-mock>=3.12.0",
    "pytest-cov>=4.1.0",
    "responses>=0.24.1",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "flake8>=6.0.0",
]

[project.scripts]
pubmed-mcp = "src.main:cli_main"

[project.urls]
Homepage = "https://github.com/your-org/pubmed-mcp"
"Bug Reports" = "https://github.com/your-org/pubmed-mcp/issues"
"Source" = "https://github.com/your-org/pubmed-mcp"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "src/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
] 